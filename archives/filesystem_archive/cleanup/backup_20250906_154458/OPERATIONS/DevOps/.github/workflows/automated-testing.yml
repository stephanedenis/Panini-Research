name: ðŸ§ª Tests Automatiques

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  schedule:
    # Tests quotidiens Ã  06:00 UTC
    - cron: '0 6 * * *'

jobs:
  python-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd Copilotage/scripts
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run Python Tests
      run: |
        cd Copilotage/scripts
        pytest --cov=. --cov-report=xml
    
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./Copilotage/scripts/coverage.xml

  rust-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          PaniniFS-2/target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run Rust Tests
      run: |
        cd PaniniFS-2
        cargo test --verbose

  performance-benchmarks:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd Copilotage/scripts
        pip install -r requirements.txt
    
    - name: Run Performance Benchmarks
      run: |
        cd Copilotage/scripts
        python3 -c "
        import time
        import json
        from datetime import datetime
        
        # Benchmark simple
        start = time.time()
        # Simuler workload
        import requests
        end = time.time()
        
        results = {
            'timestamp': datetime.now().isoformat(),
            'duration': end - start,
            'status': 'success'
        }
        
        with open('benchmark_results.json', 'w') as f:
            json.dump(results, f)
        "
    
    - name: Upload Benchmark Results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.run_number }}
        path: Copilotage/scripts/benchmark_results.json
        retention-days: 30
