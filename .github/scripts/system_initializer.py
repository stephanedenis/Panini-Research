#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Initialisateur Syst√®me Approbations - Spec-Kit PaniniFS
Configuration et d√©marrage du syst√®me d'approbation optimis√©
"""

import json
import os
import subprocess
import sys
from datetime import datetime
from pathlib import Path

class SystemInitializer:
    def __init__(self):
        self.base_path = Path(__file__).parent.parent
        self.scripts_path = self.base_path / "scripts"
        self.logs_path = self.base_path / "logs"
        self.config_path = self.base_path / "copilot-approved-scripts.json"
        
    def initialize_complete_system(self):
        """Initialisation compl√®te du syst√®me"""
        print("üöÄ INITIALISATION SYST√àME APPROBATIONS PANINI-FS")
        print("=" * 60)
        
        # 1. V√©rifier et cr√©er la structure
        self._setup_directory_structure()
        
        # 2. V√©rifier la configuration
        self._validate_configuration()
        
        # 3. Initialiser les logs
        self._initialize_logging()
        
        # 4. Tester le syst√®me de validation
        self._test_validation_system()
        
        # 5. Configurer la t√¢che cron pour l'optimisation
        self._setup_automation()
        
        # 6. D√©marrer le monitoring (optionnel)
        self._offer_monitoring_start()
        
        print("‚úÖ Initialisation termin√©e avec succ√®s!")
        return True
    
    def _setup_directory_structure(self):
        """Cr√©er la structure de r√©pertoires"""
        print("üìÅ Configuration structure r√©pertoires...")
        
        # Cr√©er les r√©pertoires n√©cessaires
        directories = [
            self.logs_path,
            self.scripts_path,
            self.base_path / "docs",
            self.base_path / "config",
            self.base_path / "reports"
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            print(f"   ‚úì {directory}")
        
        # Rendre les scripts ex√©cutables
        scripts = [
            "validate_command.py",
            "weekly_optimizer.py", 
            "approval_monitor.py"
        ]
        
        for script in scripts:
            script_path = self.scripts_path / script
            if script_path.exists():
                os.chmod(script_path, 0o755)
                print(f"   ‚úì {script} rendu ex√©cutable")
    
    def _validate_configuration(self):
        """Valider la configuration actuelle"""
        print("‚öôÔ∏è Validation configuration...")
        
        if not self.config_path.exists():
            print(f"   ‚ùå Configuration manquante: {self.config_path}")
            return False
        
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # V√©rifications essentielles
            required_sections = ['version', 'metadata', 'approved_commands', 'security_constraints']
            
            for section in required_sections:
                if section not in config:
                    print(f"   ‚ùå Section manquante: {section}")
                    return False
                print(f"   ‚úì Section {section}")
            
            # V√©rifier la version
            version = config.get('version', '1.0')
            print(f"   ‚úì Version configuration: {version}")
            
            # Compter les patterns
            total_patterns = sum(len(patterns) for patterns in config['approved_commands'].values())
            print(f"   ‚úì Patterns configur√©s: {total_patterns}")
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå Erreur validation: {e}")
            return False
    
    def _initialize_logging(self):
        """Initialiser le syst√®me de logging"""
        print("üìù Initialisation logging...")
        
        # Cr√©er les fichiers de log
        log_files = [
            "command_execution.log",
            "optimization_history.log", 
            "alerts.log",
            "system_status.log"
        ]
        
        for log_file in log_files:
            log_path = self.logs_path / log_file
            if not log_path.exists():
                log_path.touch()
                print(f"   ‚úì Cr√©√©: {log_file}")
            else:
                print(f"   ‚úì Existant: {log_file}")
        
        # Cr√©er un log d'initialisation
        init_log = {
            'timestamp': datetime.now().isoformat(),
            'event': 'system_initialization',
            'status': 'success',
            'components': ['logging', 'validation', 'optimization', 'monitoring'],
            'version': '2.0',
            'initialized_by': 'system_initializer'
        }
        
        with open(self.logs_path / "system_status.log", 'a', encoding='utf-8') as f:
            f.write(json.dumps(init_log, ensure_ascii=False) + '\n')
    
    def _test_validation_system(self):
        """Tester le syst√®me de validation"""
        print("üß™ Test syst√®me validation...")
        
        validate_script = self.scripts_path / "validate_command.py"
        
        if not validate_script.exists():
            print("   ‚ùå Script validation manquant")
            return False
        
        # Tests de base
        test_commands = [
            ("python3", "panini_binary_decomposer.py --test"),
            ("curl", "http://127.0.0.1:9000/health"),
            ("ls", "-la /tmp"),
            ("rm", "-rf /")  # Doit √™tre rejet√©
        ]
        
        for command, args in test_commands:
            try:
                result = subprocess.run([
                    sys.executable, str(validate_script), command, args
                ], capture_output=True, text=True, timeout=5)
                
                if result.returncode == 0:
                    print(f"   ‚úÖ {command}: APPROUV√â")
                else:
                    print(f"   ‚ùå {command}: REJET√â ({result.stdout.strip()})")
                    
            except subprocess.TimeoutExpired:
                print(f"   ‚è±Ô∏è {command}: TIMEOUT")
            except Exception as e:
                print(f"   ‚ö†Ô∏è {command}: ERREUR - {e}")
        
        return True
    
    def _setup_automation(self):
        """Configurer l'automatisation"""
        print("‚ö° Configuration automatisation...")
        
        # Cr√©er un script wrapper pour cron
        cron_script = self.scripts_path / "weekly_optimization_cron.sh"
        
        cron_content = f"""#!/bin/bash
# Script automatique d'optimisation hebdomadaire PaniniFS
# G√©n√©r√© automatiquement le {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

cd "{self.base_path}"
export PYTHONPATH="{self.base_path}:$PYTHONPATH"

# Log de d√©marrage
echo "[$(date)] D√©marrage optimisation hebdomadaire" >> logs/automation.log

# Ex√©cuter l'optimiseur
python3 scripts/weekly_optimizer.py >> logs/automation.log 2>&1

# V√©rifier le statut
if [ $? -eq 0 ]; then
    echo "[$(date)] Optimisation termin√©e avec succ√®s" >> logs/automation.log
else
    echo "[$(date)] ERREUR optimisation" >> logs/automation.log
fi
"""
        
        with open(cron_script, 'w', encoding='utf-8') as f:
            f.write(cron_content)
        
        os.chmod(cron_script, 0o755)
        print(f"   ‚úì Script cron cr√©√©: {cron_script}")
        
        # Proposer l'installation cron
        print("\nüí° Pour automatiser l'optimisation hebdomadaire:")
        print("   crontab -e")
        print("   Ajouter la ligne:")
        print(f"   0 2 * * 0 {cron_script}")  # Dimanche 2h du matin
        print("   (optimisation tous les dimanches √† 2h)")
    
    def _offer_monitoring_start(self):
        """Proposer de d√©marrer le monitoring"""
        print("üîç Monitoring en temps r√©el disponible")
        
        response = input("D√©marrer le monitoring maintenant? (o/n): ").lower().strip()
        
        if response in ['o', 'oui', 'y', 'yes']:
            try:
                monitor_script = self.scripts_path / "approval_monitor.py"
                print(f"üöÄ D√©marrage monitoring: {monitor_script}")
                
                # D√©marrer en arri√®re-plan
                subprocess.Popen([
                    sys.executable, str(monitor_script)
                ], cwd=str(self.base_path))
                
                print("‚úÖ Monitoring d√©marr√© en arri√®re-plan")
                print("üí° Utilisez 'ps aux | grep approval_monitor' pour v√©rifier")
                
            except Exception as e:
                print(f"‚ùå Erreur d√©marrage monitoring: {e}")
        else:
            print("üí° Pour d√©marrer plus tard:")
            print(f"   python3 {self.scripts_path}/approval_monitor.py")
    
    def generate_status_report(self):
        """G√©n√©rer un rapport de statut du syst√®me"""
        print("üìä G√©n√©ration rapport statut...")
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'system_version': '2.0',
            'components': {
                'validation': self._check_component_status('validate_command.py'),
                'optimization': self._check_component_status('weekly_optimizer.py'),
                'monitoring': self._check_component_status('approval_monitor.py'),
                'configuration': self._check_configuration_status()
            },
            'file_structure': self._check_file_structure(),
            'recommendations': self._generate_recommendations()
        }
        
        # Sauvegarder le rapport
        report_path = self.base_path / "reports" / f"system_status_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"‚úÖ Rapport sauv√©: {report_path}")
        return report
    
    def _check_component_status(self, script_name):
        """V√©rifier le statut d'un composant"""
        script_path = self.scripts_path / script_name
        
        return {
            'exists': script_path.exists(),
            'executable': script_path.exists() and os.access(script_path, os.X_OK),
            'size': script_path.stat().st_size if script_path.exists() else 0,
            'last_modified': datetime.fromtimestamp(script_path.stat().st_mtime).isoformat() if script_path.exists() else None
        }
    
    def _check_configuration_status(self):
        """V√©rifier le statut de la configuration"""
        if not self.config_path.exists():
            return {'status': 'missing'}
        
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            total_patterns = sum(len(patterns) for patterns in config.get('approved_commands', {}).values())
            
            return {
                'status': 'valid',
                'version': config.get('version', 'unknown'),
                'total_patterns': total_patterns,
                'last_updated': config.get('metadata', {}).get('last_updated'),
                'optimization_count': config.get('metadata', {}).get('optimization_count', 0)
            }
            
        except Exception as e:
            return {'status': 'error', 'error': str(e)}
    
    def _check_file_structure(self):
        """V√©rifier la structure des fichiers"""
        structure = {}
        
        for path in [self.logs_path, self.scripts_path, self.base_path / "docs", self.base_path / "reports"]:
            structure[path.name] = {
                'exists': path.exists(),
                'is_directory': path.is_dir() if path.exists() else False,
                'file_count': len(list(path.iterdir())) if path.exists() and path.is_dir() else 0
            }
        
        return structure
    
    def _generate_recommendations(self):
        """G√©n√©rer des recommandations"""
        recommendations = []
        
        # V√©rifier les logs
        if (self.logs_path / "command_execution.log").stat().st_size == 0:
            recommendations.append("Aucune activit√© d√©tect√©e - v√©rifier l'int√©gration du syst√®me de validation")
        
        # V√©rifier l'optimisation
        if not (self.logs_path / "optimization_history.log").exists():
            recommendations.append("Ex√©cuter une premi√®re optimisation pour initialiser l'historique")
        
        # V√©rifier l'automatisation
        try:
            result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
            if 'weekly_optimization_cron.sh' not in result.stdout:
                recommendations.append("Configurer la t√¢che cron pour l'optimisation automatique")
        except:
            recommendations.append("V√©rifier la disponibilit√© de cron pour l'automatisation")
        
        return recommendations

def main():
    """Point d'entr√©e principal"""
    print("üîß INITIALISATEUR SYST√àME APPROBATIONS PANINI-FS")
    print("Version 2.0 - Spec-Kit Complet")
    print("=" * 60)
    
    initializer = SystemInitializer()
    
    try:
        # Initialisation compl√®te
        success = initializer.initialize_complete_system()
        
        if success:
            # G√©n√©rer rapport de statut
            print("\nüìä G√©n√©ration rapport final...")
            report = initializer.generate_status_report()
            
            print("\nüéâ SYST√àME INITIALIS√â AVEC SUCC√àS!")
            print("=" * 60)
            print("üîß Composants install√©s:")
            print("   ‚Ä¢ Syst√®me de validation des commandes")
            print("   ‚Ä¢ Optimiseur hebdomadaire automatique") 
            print("   ‚Ä¢ Moniteur temps r√©el des approbations")
            print("   ‚Ä¢ Logging et reporting complets")
            print("   ‚Ä¢ Structure de gouvernance Spec-Kit")
            
            print("\nüöÄ Prochaines √©tapes:")
            print("   1. Configurer la t√¢che cron pour l'automatisation")
            print("   2. Tester le syst√®me avec quelques commandes")
            print("   3. Surveiller les logs pour optimiser les patterns")
            print("   4. Ex√©cuter l'optimiseur hebdomadaire si n√©cessaire")
            
            return 0
        else:
            print("‚ùå √âchec de l'initialisation")
            return 1
            
    except Exception as e:
        print(f"üí• Erreur critique: {e}")
        return 1

if __name__ == '__main__':
    exit(main())