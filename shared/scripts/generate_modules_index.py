#!/usr/bin/env python3
import os
from pathlib import Path

ROOT = Path(__file__).resolve().parents[2]
MODULES_DIR = ROOT / "modules"
OUT_FILE = ROOT / "docs" / "modules" / "index.md"

HEADER = """# Documentation des modules

<!-- Generated by scripts/devops/generate_modules_index.py; do not edit manually. -->

Chaque sous-module dispose idéalement d’un dossier `docs/` pour sa documentation spécifique (schémas, guides, API, ADRs).
Cette page liste les modules et pointe vers leurs documents sur GitHub tant que l’agrégation directe dans MkDocs n’est pas en place.

## Modules détectés
"""

def find_modules():
    if not MODULES_DIR.exists():
        return []
    entries = []
    base = "https://github.com/stephanedenis/PaniniFS"
    for p in sorted(MODULES_DIR.iterdir()):
        if not p.is_dir():
            continue
        name = p.name
        docs_index = p / "docs" / "index.md"
        docs_dir = p / "docs"
        readme = p / "README.md"
    # Pour le site MkDocs (docs), lier vers GitHub pour éviter les liens 404
        if docs_index.exists() or docs_dir.exists():
            link = f"{base}/tree/HEAD/modules/{name}/docs"
            desc = f"Documentation du module {name} (dossier docs/)"
        elif readme.exists():
            link = f"{base}/blob/HEAD/modules/{name}/README.md"
            desc = f"README du module {name}"
        else:
            link = f"{base}/tree/HEAD/modules/{name}"
            desc = f"Sources du module {name}"
        entries.append((name, link, desc))
    return entries

def render(entries):
    lines = [HEADER, ""]
    if not entries:
        lines.append("(Aucun module détecté)")
    else:
        for name, link, desc in entries:
            # Titre humanisé simple
            title = name.replace('-', ' ').replace('_', ' ').title()
            lines.append(f"- [{title}]({link}) — {desc}.")
    lines.append("\n")
    return "\n".join(lines)

def main():
    entries = find_modules()
    OUT_FILE.parent.mkdir(parents=True, exist_ok=True)
    content = render(entries)
    previous = OUT_FILE.read_text(encoding='utf-8') if OUT_FILE.exists() else ""
    if previous.strip() == content.strip():
        return 0
    OUT_FILE.write_text(content, encoding='utf-8')
    print(f"Updated {OUT_FILE}")
    return 0

if __name__ == "__main__":
    raise SystemExit(main())
