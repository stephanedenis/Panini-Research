#!/usr/bin/env python3
"""
DIAGNOSTIC ET R√âPARATION SERVEURS MCP
===================================

Script pour diagnostiquer et r√©parer les probl√®mes avec les serveurs MCP,
en particulier le serveur Pylance qui ne r√©pond pas √† l'initialisation.
"""

import os
import subprocess
import json
import time
from pathlib import Path

class MCPServerDiagnostic:
    """Diagnostic et r√©paration serveurs MCP"""
    
    def __init__(self):
        self.vscode_config_dir = Path.home() / ".config/Code/User"
        self.vscode_logs_dir = Path.home() / ".config/Code/logs"
        self.settings_file = self.vscode_config_dir / "settings.json"
        
    def diagnose_mcp_servers(self):
        """Diagnostic complet des serveurs MCP"""
        
        print("üîç DIAGNOSTIC SERVEURS MCP")
        print("=" * 40)
        
        # 1. V√©rifier configuration
        print("üìã Configuration MCP:")
        if self.settings_file.exists():
            try:
                with open(self.settings_file, 'r') as f:
                    settings = json.load(f)
                
                mcp_config = {}
                for key, value in settings.items():
                    if 'mcp' in key.lower():
                        mcp_config[key] = value
                
                if mcp_config:
                    for key, value in mcp_config.items():
                        print(f"   ‚Ä¢ {key}: {value}")
                else:
                    print("   ‚ö†Ô∏è Aucune configuration MCP trouv√©e")
                    
            except Exception as e:
                print(f"   ‚ùå Erreur lecture settings: {e}")
        else:
            print("   ‚ùå Fichier settings.json introuvable")
        
        # 2. V√©rifier processus
        print(f"\nüîÑ Processus MCP:")
        result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
        mcp_processes = [line for line in result.stdout.split('\n') if 'mcp' in line.lower() and 'grep' not in line]
        
        if mcp_processes:
            for proc in mcp_processes:
                print(f"   ‚Ä¢ {proc}")
        else:
            print("   ‚úÖ Aucun processus MCP bloqu√© trouv√©")
        
        # 3. Analyser logs r√©cents
        print(f"\nüìú Logs MCP r√©cents:")
        self._analyze_recent_logs()
        
        # 4. V√©rifier extensions Python
        print(f"\nüêç Extensions Python:")
        self._check_python_extensions()
        
    def _analyze_recent_logs(self):
        """Analyse les logs MCP r√©cents"""
        
        # Trouver les logs MCP les plus r√©cents
        mcp_logs = []
        if self.vscode_logs_dir.exists():
            for log_file in self.vscode_logs_dir.rglob("**/mcpServer*/*.log"):
                if log_file.stat().st_size > 0:  # Seulement les logs non-vides
                    mcp_logs.append((log_file, log_file.stat().st_mtime))
        
        # Trier par date de modification
        mcp_logs.sort(key=lambda x: x[1], reverse=True)
        
        if mcp_logs:
            print(f"   üìÅ {len(mcp_logs)} logs trouv√©s")
            
            # Analyser le log le plus r√©cent
            latest_log, _ = mcp_logs[0]
            print(f"   üìÑ Log le plus r√©cent: {latest_log.name}")
            
            try:
                with open(latest_log, 'r') as f:
                    lines = f.readlines()[-10:]  # 10 derni√®res lignes
                
                # Chercher les erreurs communes
                errors = []
                waiting_count = 0
                
                for line in lines:
                    if "Waiting for server to respond to `initialize`" in line:
                        waiting_count += 1
                    elif "error" in line.lower() or "failed" in line.lower():
                        errors.append(line.strip())
                
                if waiting_count > 5:
                    print(f"   üö® PROBL√àME: Serveur bloqu√© sur initialisation ({waiting_count} tentatives)")
                    print(f"   üí° Solution: Red√©marrage du serveur MCP requis")
                
                if errors:
                    print(f"   ‚ùå Erreurs d√©tect√©es:")
                    for error in errors[:3]:  # Max 3 erreurs
                        print(f"      ‚Ä¢ {error}")
                        
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erreur lecture log: {e}")
        else:
            print(f"   üì≠ Aucun log MCP trouv√©")
    
    def _check_python_extensions(self):
        """V√©rifier les extensions Python/Pylance"""
        
        try:
            result = subprocess.run(['code', '--list-extensions'], capture_output=True, text=True)
            extensions = result.stdout.split('\n')
            
            python_extensions = [ext for ext in extensions if 'python' in ext.lower() or 'pylance' in ext.lower()]
            
            if python_extensions:
                print(f"   ‚úÖ Extensions Python trouv√©es:")
                for ext in python_extensions:
                    if ext.strip():
                        print(f"      ‚Ä¢ {ext}")
            else:
                print(f"   ‚ùå Aucune extension Python trouv√©e")
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erreur v√©rification extensions: {e}")
    
    def repair_mcp_servers(self):
        """R√©parer les serveurs MCP bloqu√©s"""
        
        print(f"\nüîß R√âPARATION SERVEURS MCP")
        print("=" * 40)
        
        steps = [
            "Arr√™t des processus MCP bloqu√©s",
            "Nettoyage des logs corrompus", 
            "R√©initialisation cache VS Code",
            "Red√©marrage service MCP"
        ]
        
        for i, step in enumerate(steps, 1):
            print(f"{i}. {step}...")
            
            if i == 1:  # Arr√™t processus
                subprocess.run(['pkill', '-f', 'ms-python.vscode-pylance'], 
                             capture_output=True)
                subprocess.run(['pkill', '-f', 'mcp'], capture_output=True)
                print("   ‚úÖ Processus arr√™t√©s")
                
            elif i == 2:  # Nettoyage logs
                try:
                    # Supprimer logs MCP corrompus/bloqu√©s
                    if self.vscode_logs_dir.exists():
                        for log_file in self.vscode_logs_dir.rglob("**/mcpServer*/*.log"):
                            if log_file.stat().st_size > 100000:  # > 100KB = possiblement corrompu
                                log_file.unlink()
                    print("   ‚úÖ Logs nettoy√©s")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Nettoyage partiel: {e}")
                    
            elif i == 3:  # Cache VS Code
                cache_dirs = [
                    self.vscode_config_dir / "CachedExtensions",
                    self.vscode_config_dir / "logs",
                    Path.home() / ".vscode" / "extensions" / "ms-python.vscode-pylance*" / "dist" / "cache"
                ]
                
                for cache_dir in cache_dirs:
                    if cache_dir.exists():
                        try:
                            import shutil
                            if cache_dir.is_dir():
                                shutil.rmtree(cache_dir)
                            print(f"   ‚úÖ Cache {cache_dir.name} nettoy√©")
                        except:
                            pass
                            
            elif i == 4:  # Red√©marrage
                print("   üí≠ Red√©marrage automatique au prochain lancement VS Code")
                print("   üìù Recommandation: Fermer et rouvrir VS Code")
            
            time.sleep(0.5)  # Pause visuelle
        
        print(f"\n‚ú® R√âPARATION TERMIN√âE")
        print("üìã Actions recommand√©es:")
        print("   1. Fermer compl√®tement VS Code (toutes les fen√™tres)")
        print("   2. Attendre 5 secondes") 
        print("   3. Relancer VS Code")
        print("   4. V√©rifier que les outils MCP fonctionnent")
    
    def verify_mcp_functionality(self):
        """V√©rifier le fonctionnement des outils MCP"""
        
        print(f"\nüß™ TEST FONCTIONNALIT√â MCP")
        print("=" * 40)
        
        print("üî¨ Tests recommand√©s dans VS Code:")
        print("   ‚Ä¢ Ouvrir le chat Copilot")
        print("   ‚Ä¢ Taper une question Python simple")
        print("   ‚Ä¢ V√©rifier que les suggestions Pylance apparaissent")
        print("   ‚Ä¢ Tester l'autocompl√©tion dans un fichier .py")
        
        print(f"\nüìä Si les probl√®mes persistent:")
        print("   ‚Ä¢ R√©installer l'extension Pylance")
        print("   ‚Ä¢ V√©rifier les param√®tres Python/Pylance")
        print("   ‚Ä¢ Red√©marrer en mode sans extensions (--disable-extensions)")

def main():
    """Diagnostic et r√©paration principale"""
    
    diagnostic = MCPServerDiagnostic()
    
    # Phase 1: Diagnostic
    diagnostic.diagnose_mcp_servers()
    
    # Phase 2: R√©paration 
    diagnostic.repair_mcp_servers()
    
    # Phase 3: V√©rification
    diagnostic.verify_mcp_functionality()

if __name__ == "__main__":
    main()