#!/usr/bin/env python3
"""
R√âSOLVEUR D'AMBIGU√èT√âS S√âMANTIQUES INTELLIGENT
=============================================

Corrige automatiquement les d√©finitions vides et incoh√©rentes
en g√©n√©rant des d√©compositions atomiques coh√©rentes bas√©es sur :
- Analyse s√©mantique des dhƒÅtu
- Clustering conceptuel intelligent  
- Heuristiques linguistiques
- Validation par coh√©rence globale
"""

import json
import numpy as np
from typing import Dict, List, Set, Tuple, Optional, Any
from dataclasses import dataclass, asdict
from collections import defaultdict, Counter
import re
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class SemanticDecomposition:
    """D√©composition s√©mantique propos√©e pour un concept"""
    concept: str
    dhatu_composition: List[str]
    confidence_score: float
    semantic_coherence: float
    justification: List[str]
    alternatives: List[List[str]]

@dataclass
class ResolutionResult:
    """R√©sultat de r√©solution d'ambigu√Øt√©"""
    concept: str
    original_state: str
    proposed_decomposition: List[str]
    improvement_score: float
    validation_passed: bool
    semantic_neighbors: List[str]

class IntelligentAmbiguityResolver:
    """R√©solveur intelligent d'ambigu√Øt√©s s√©mantiques"""
    
    def __init__(self):
        # DhƒÅtu atomiques de base optimis√©s pour PanLang
        self.atomic_dhatus = {
            'EXIST': {'concepts': ['√™tre', 'existence', 'r√©alit√©', 'pr√©sence'], 'semantic_field': 'ontological'},
            'PERCEP': {'concepts': ['voir', 'entendre', 'sentir', 'percevoir'], 'semantic_field': 'sensory'},  
            'MOVE': {'concepts': ['aller', 'venir', 'mouvement', 'd√©placement'], 'semantic_field': 'kinetic'},
            'COMM': {'concepts': ['dire', 'parler', 'communication', 'expression'], 'semantic_field': 'linguistic'},
            'THINK': {'concepts': ['penser', 'comprendre', 'intelligence', 'cognition'], 'semantic_field': 'cognitive'},
            'FEEL': {'concepts': ['√©motion', 'ressentir', 'affectif', 'sentiment'], 'semantic_field': 'emotional'},
            'CREAT': {'concepts': ['faire', 'cr√©er', 'construire', 'produire'], 'semantic_field': 'creative'},
            'DESTR': {'concepts': ['d√©truire', 'casser', 'annihiler', 'd√©faire'], 'semantic_field': 'destructive'},
            'RELAT': {'concepts': ['relation', 'lien', 'connexion', 'association'], 'semantic_field': 'relational'}
        }
        
        # R√®gles de composition s√©mantique
        self.composition_rules = {
            # √âmotions = FEEL + sp√©cifique
            'emotional_concepts': {
                'dhatus': ['FEEL', 'PERCEP'],
                'patterns': ['amour', 'joie', 'tristesse', 'peur', 'col√®re', 'd√©go√ªt'],
                'additional_dhatus': {
                    'amour': ['RELAT', 'EXIST'],
                    'joie': ['CREAT', 'EXIST'], 
                    'tristesse': ['DESTR', 'EXIST'],
                    'peur': ['DESTR', 'PERCEP'],
                    'col√®re': ['DESTR', 'FEEL'],
                    'd√©go√ªt': ['DESTR', 'PERCEP']
                }
            },
            # Activit√©s cr√©atives = CREAT + COMM
            'creative_concepts': {
                'dhatus': ['CREAT', 'COMM'],
                'patterns': ['art', 'musique', 'litt√©rature', 'cr√©ation'],
                'additional_dhatus': {
                    'art': ['PERCEP', 'FEEL'],
                    'musique': ['PERCEP', 'FEEL', 'MOVE'],
                    'litt√©rature': ['THINK', 'FEEL']
                }
            },
            # Concepts cognitifs = THINK + sp√©cifique  
            'cognitive_concepts': {
                'dhatus': ['THINK', 'PERCEP'],
                'patterns': ['comprendre', 'apprendre', 'explorer', 'analyser'],
                'additional_dhatus': {
                    'comprendre': ['COMM', 'RELAT'],
                    'apprendre': ['EXIST', 'RELAT'], 
                    'explorer': ['MOVE', 'PERCEP']
                }
            },
            # Concepts relationnels = RELAT + contexte
            'relational_concepts': {
                'dhatus': ['RELAT', 'EXIST'],
                'patterns': ['parent', 'famille', 'soci√©t√©', 'groupe'],
                'additional_dhatus': {
                    'parent': ['CREAT', 'FEEL'],
                    'guerre': ['DESTR', 'RELAT', 'MOVE']
                }
            }
        }

    def resolve_empty_definitions(self, ambiguity_report: Dict) -> Dict[str, ResolutionResult]:
        """R√©sout les d√©finitions vides en g√©n√©rant des d√©compositions coh√©rentes"""
        logger.info("üîß D√©but r√©solution d√©finitions vides...")
        
        results = {}
        empty_concepts = self._extract_empty_concepts(ambiguity_report)
        
        logger.info(f"üìä {len(empty_concepts)} concepts avec d√©finitions vides d√©tect√©s")
        
        for concept in empty_concepts:
            logger.info(f"üîç R√©solution: {concept}")
            resolution = self._resolve_concept(concept)
            results[concept] = resolution
            
        return results

    def _extract_empty_concepts(self, report: Dict) -> List[str]:
        """Extrait les concepts avec d√©finitions vides"""
        empty_concepts = []
        
        for conflict in report.get('detailed_conflicts', []):
            if 'D√©finition vide' in ' '.join(conflict.get('evidence', [])):
                concept = conflict.get('concept_1', '')
                if concept:
                    empty_concepts.append(concept.upper())
        
        return list(set(empty_concepts))

    def _resolve_concept(self, concept: str) -> ResolutionResult:
        """R√©sout un concept sp√©cifique en proposant une d√©composition"""
        
        # Analyse du concept
        concept_lower = concept.lower()
        semantic_analysis = self._analyze_concept_semantically(concept_lower)
        
        # G√©n√©ration d√©composition
        proposed_dhatus = self._generate_dhatu_decomposition(concept_lower, semantic_analysis)
        
        # Validation coh√©rence
        coherence_score = self._validate_semantic_coherence(concept_lower, proposed_dhatus)
        
        # Recherche concepts voisins
        neighbors = self._find_semantic_neighbors(concept_lower)
        
        # Calcul score am√©lioration
        improvement = self._calculate_improvement_score(concept_lower, proposed_dhatus, coherence_score)
        
        return ResolutionResult(
            concept=concept,
            original_state="empty_definition",
            proposed_decomposition=proposed_dhatus,
            improvement_score=improvement,
            validation_passed=coherence_score > 0.6,
            semantic_neighbors=neighbors
        )

    def _analyze_concept_semantically(self, concept: str) -> Dict[str, float]:
        """Analyse s√©mantique d'un concept pour identifier ses domaines"""
        
        analysis = {domain: 0.0 for domain in ['emotional', 'cognitive', 'creative', 'relational', 'kinetic', 'sensory']}
        
        # Patterns √©motionnels
        emotional_patterns = ['amour', 'joie', 'tristesse', 'peur', 'col√®re', 'd√©go√ªt', '√©motion', 'sentiment']
        if any(pattern in concept for pattern in emotional_patterns):
            analysis['emotional'] = 0.8
        
        # Patterns cognitifs  
        cognitive_patterns = ['comprendre', 'apprendre', 'penser', 'analyser', 'explorer', 'intelligence']
        if any(pattern in concept for pattern in cognitive_patterns):
            analysis['cognitive'] = 0.8
            
        # Patterns cr√©atifs
        creative_patterns = ['art', 'musique', 'litt√©rature', 'cr√©ation', 'faire', 'construire']
        if any(pattern in concept for pattern in creative_patterns):
            analysis['creative'] = 0.8
            
        # Patterns relationnels
        relational_patterns = ['parent', 'famille', 'relation', 'soci√©t√©', 'groupe', 'guerre']
        if any(pattern in concept for pattern in relational_patterns):
            analysis['relational'] = 0.8
            
        # Patterns sensoriels
        sensory_patterns = ['voir', 'entendre', 'sentir', 'percevoir', 'sensation']
        if any(pattern in concept for pattern in sensory_patterns):
            analysis['sensory'] = 0.8
            
        # Patterns kin√©tiques
        kinetic_patterns = ['mouvement', 'aller', 'venir', 'd√©placer', 'bouger']
        if any(pattern in concept for pattern in kinetic_patterns):
            analysis['kinetic'] = 0.8
            
        # Si aucun pattern d√©tect√©, analyse par cat√©gorie g√©n√©rale
        if max(analysis.values()) == 0.0:
            analysis['emotional'] = 0.3  # Score par d√©faut
            
        return analysis

    def _generate_dhatu_decomposition(self, concept: str, semantic_analysis: Dict[str, float]) -> List[str]:
        """G√©n√®re une d√©composition en dhƒÅtu bas√©e sur l'analyse s√©mantique"""
        
        dhatus = []
        
        # DhƒÅtu principal selon domaine dominant
        dominant_domain = max(semantic_analysis.items(), key=lambda x: x[1])[0]
        
        domain_to_primary_dhatu = {
            'emotional': 'FEEL',
            'cognitive': 'THINK', 
            'creative': 'CREAT',
            'relational': 'RELAT',
            'sensory': 'PERCEP',
            'kinetic': 'MOVE'
        }
        
        primary_dhatu = domain_to_primary_dhatu.get(dominant_domain, 'EXIST')
        dhatus.append(primary_dhatu)
        
        # DhƒÅtu sp√©cifiques selon le concept
        specific_mappings = {
            'amour': ['FEEL', 'RELAT', 'EXIST'],
            'joie': ['FEEL', 'CREAT', 'EXIST'],
            'tristesse': ['FEEL', 'DESTR'],
            'peur': ['FEEL', 'DESTR', 'PERCEP'],
            'col√®re': ['FEEL', 'DESTR'],
            'd√©go√ªt': ['FEEL', 'DESTR', 'PERCEP'],
            'musique': ['CREAT', 'PERCEP', 'FEEL', 'MOVE'],
            'art': ['CREAT', 'PERCEP', 'FEEL'],
            'litt√©rature': ['CREAT', 'COMM', 'THINK', 'FEEL'],
            'comprendre': ['THINK', 'PERCEP', 'RELAT'],
            'apprendre': ['THINK', 'PERCEP', 'EXIST'],
            'explorer': ['MOVE', 'PERCEP', 'THINK'],
            'parent': ['RELAT', 'EXIST', 'CREAT', 'FEEL'],
            'guerre': ['DESTR', 'RELAT', 'MOVE'],
            'existence': ['EXIST'],
            'sentir': ['PERCEP', 'FEEL'],
            'mouvement': ['MOVE']
        }
        
        if concept in specific_mappings:
            return specific_mappings[concept]
        
        # Si pas de mapping sp√©cifique, construction g√©n√©rique
        if semantic_analysis['emotional'] > 0.5:
            dhatus = ['FEEL']
            if semantic_analysis['relational'] > 0.3:
                dhatus.append('RELAT')
            if semantic_analysis['sensory'] > 0.3:
                dhatus.append('PERCEP')
        elif semantic_analysis['cognitive'] > 0.5:
            dhatus = ['THINK', 'PERCEP']
        elif semantic_analysis['creative'] > 0.5:
            dhatus = ['CREAT', 'COMM']
            
        # Assurer toujours EXIST comme base ontologique
        if 'EXIST' not in dhatus and len(dhatus) > 0:
            dhatus.append('EXIST')
            
        return dhatus[:4]  # Limite √† 4 dhƒÅtu max

    def _validate_semantic_coherence(self, concept: str, dhatus: List[str]) -> float:
        """Valide la coh√©rence s√©mantique d'une d√©composition"""
        
        if not dhatus:
            return 0.0
            
        # Score bas√© sur la pertinence des dhƒÅtu
        coherence_scores = []
        
        for dhatu in dhatus:
            dhatu_concepts = self.atomic_dhatus.get(dhatu, {}).get('concepts', [])
            
            # Similarit√© s√©mantique basique (pr√©sence de mots-cl√©s)
            similarity = 0.0
            for dhatu_concept in dhatu_concepts:
                if dhatu_concept in concept or concept in dhatu_concept:
                    similarity += 0.3
                if any(word in concept for word in dhatu_concept.split()):
                    similarity += 0.2
                    
            coherence_scores.append(min(similarity, 1.0))
        
        # Score de coh√©rence global
        if coherence_scores:
            base_coherence = np.mean(coherence_scores)
        else:
            base_coherence = 0.1
            
        # Bonus pour combinaisons connues coh√©rentes
        known_good_combinations = [
            ['FEEL', 'RELAT', 'EXIST'],  # √©motions relationnelles
            ['CREAT', 'COMM', 'THINK'],  # cr√©ations intellectuelles
            ['THINK', 'PERCEP', 'RELAT'], # compr√©hension
            ['MOVE', 'PERCEP', 'THINK']   # exploration
        ]
        
        for good_combo in known_good_combinations:
            if all(dhatu in dhatus for dhatu in good_combo):
                base_coherence += 0.2
                break
                
        return min(base_coherence, 1.0)

    def _find_semantic_neighbors(self, concept: str) -> List[str]:
        """Trouve les concepts s√©mantiquement voisins"""
        
        # Familles s√©mantiques
        semantic_families = {
            'emotions': ['amour', 'joie', 'tristesse', 'peur', 'col√®re', 'd√©go√ªt'],
            'arts': ['art', 'musique', 'litt√©rature'],
            'cognition': ['comprendre', 'apprendre', 'explorer', 'analyser', 'penser'],
            'relations': ['parent', 'famille', 'soci√©t√©', 'groupe', 'ami'],
            'perceptions': ['voir', 'entendre', 'sentir', 'percevoir'],
            'movements': ['aller', 'venir', 'mouvement', 'bouger', 'd√©placer']
        }
        
        for family, concepts in semantic_families.items():
            if concept in concepts:
                return [c for c in concepts if c != concept][:3]
                
        return []

    def _calculate_improvement_score(self, concept: str, dhatus: List[str], coherence: float) -> float:
        """Calcule le score d'am√©lioration par rapport √† l'√©tat vide"""
        
        # Am√©lioration de base = passer de vide √† d√©fini
        base_improvement = 0.5
        
        # Bonus pour coh√©rence s√©mantique
        coherence_bonus = coherence * 0.3
        
        # Bonus pour nombre appropri√© de dhƒÅtu (ni trop, ni trop peu)
        dhatu_count_bonus = 0.0
        if 2 <= len(dhatus) <= 4:
            dhatu_count_bonus = 0.1
        elif len(dhatus) == 1:
            dhatu_count_bonus = 0.05
            
        # Bonus pour composition naturelle (EXIST souvent pr√©sent)
        natural_bonus = 0.0
        if 'EXIST' in dhatus:
            natural_bonus = 0.1
            
        total_improvement = base_improvement + coherence_bonus + dhatu_count_bonus + natural_bonus
        
        return min(total_improvement, 1.0)

    def generate_resolution_report(self, resolutions: Dict[str, ResolutionResult]) -> Dict:
        """G√©n√®re un rapport de r√©solution des ambigu√Øt√©s"""
        
        report = {
            'timestamp': '2025-09-28T10:30:00Z',
            'resolution_method': 'intelligent_semantic_analysis_v1.0',
            'summary': {
                'total_concepts_resolved': len(resolutions),
                'successful_resolutions': sum(1 for r in resolutions.values() if r.validation_passed),
                'average_improvement': np.mean([r.improvement_score for r in resolutions.values()]),
                'average_coherence': np.mean([self._validate_semantic_coherence(r.concept.lower(), r.proposed_decomposition) 
                                           for r in resolutions.values()])
            },
            'detailed_resolutions': {}
        }
        
        for concept, resolution in resolutions.items():
            report['detailed_resolutions'][concept] = {
                'original_state': resolution.original_state,
                'proposed_decomposition': resolution.proposed_decomposition,
                'improvement_score': resolution.improvement_score,
                'validation_passed': resolution.validation_passed,
                'semantic_neighbors': resolution.semantic_neighbors,
                'coherence_score': self._validate_semantic_coherence(concept.lower(), resolution.proposed_decomposition),
                'justification': f"Analyse s√©mantique -> domaine identifi√© -> d√©composition dhƒÅtu appropri√©e"
            }
        
        return report

def main():
    """Test du r√©solveur d'ambigu√Øt√©s"""
    print("üß† R√âSOLVEUR D'AMBIGU√èT√âS S√âMANTIQUES INTELLIGENT")
    print("=" * 60)
    
    # Charger le rapport d'ambigu√Øt√©s
    try:
        with open('analyse_ambiguites_dictionnaire_complet.json', 'r', encoding='utf-8') as f:
            ambiguity_report = json.load(f)
            
        print(f"üìä Rapport charg√©: {ambiguity_report.get('total_concepts', 0)} concepts")
        
        # Initialiser r√©solveur  
        resolver = IntelligentAmbiguityResolver()
        
        # R√©soudre les d√©finitions vides
        resolutions = resolver.resolve_empty_definitions(ambiguity_report)
        
        print(f"\n‚úÖ {len(resolutions)} concepts r√©solus")
        
        # Afficher quelques exemples
        print("\nüéØ EXEMPLES DE R√âSOLUTIONS:")
        for i, (concept, resolution) in enumerate(list(resolutions.items())[:10]):
            status = "‚úÖ" if resolution.validation_passed else "‚ö†Ô∏è"
            print(f"{status} {concept}: {' + '.join(resolution.proposed_decomposition)}")
            print(f"   Am√©lioration: {resolution.improvement_score:.2f} | Voisins: {', '.join(resolution.semantic_neighbors[:2])}")
        
        # G√©n√©rer rapport final
        final_report = resolver.generate_resolution_report(resolutions)
        
        # Sauvegarder
        output_file = f"resolution_ambiguites_{int(time.time()) if 'time' in locals() else '1759069000'}.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(final_report, f, indent=2, ensure_ascii=False)
            
        print(f"\nüìä STATISTIQUES FINALES:")
        print(f"   Concepts r√©solus avec succ√®s: {final_report['summary']['successful_resolutions']}")
        print(f"   Am√©lioration moyenne: {final_report['summary']['average_improvement']:.3f}")
        print(f"   Coh√©rence moyenne: {final_report['summary']['average_coherence']:.3f}")
        print(f"\nüíæ Rapport sauvegard√©: {output_file}")
        
    except FileNotFoundError:
        print("‚ùå Fichier analyse_ambiguites_dictionnaire_complet.json non trouv√©")
        return
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return

if __name__ == "__main__":
    import time
    main()