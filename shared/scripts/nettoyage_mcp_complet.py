#!/usr/bin/env python3
"""
NETTOYAGE ET R√âPARATION COMPL√àTE SERVEURS MCP
============================================

Script pour nettoyer compl√®tement les probl√®mes MCP et restaurer
un environnement de travail fonctionnel.
"""

import json
import subprocess
import shutil
from pathlib import Path

def nettoyer_serveurs_mcp():
    """Nettoyage complet des serveurs MCP probl√©matiques"""
    
    print("üßπ NETTOYAGE COMPLET SERVEURS MCP")
    print("=" * 50)
    
    # 1. Arr√™ter tous les processus MCP
    print("1. Arr√™t des processus MCP...")
    subprocess.run(['pkill', '-f', 'mcp'], capture_output=True)
    subprocess.run(['pkill', '-f', 'pylance'], capture_output=True)
    subprocess.run(['pkill', '-f', 'localhost:4005'], capture_output=True)
    print("   ‚úÖ Processus arr√™t√©s")
    
    # 2. Nettoyer les logs MCP corrompus
    print("\n2. Nettoyage logs MCP...")
    logs_dir = Path.home() / ".config/Code/logs"
    if logs_dir.exists():
        for log_file in logs_dir.rglob("**/mcpServer*/*.log"):
            try:
                log_file.unlink()
                print(f"   üóëÔ∏è {log_file.name} supprim√©")
            except:
                pass
    print("   ‚úÖ Logs nettoy√©s")
    
    # 3. Nettoyer les sessions de chat probl√©matiques
    print("\n3. Nettoyage sessions chat...")
    workspace_storage = Path.home() / ".config/Code/User/workspaceStorage"
    if workspace_storage.exists():
        sessions_nettoyees = 0
        for session_file in workspace_storage.rglob("**/chatSessions/*.json"):
            try:
                with open(session_file, 'r') as f:
                    content = f.read()
                    if "localhost:4005" in content:
                        session_file.unlink()
                        sessions_nettoyees += 1
                        print(f"   üóëÔ∏è Session probl√©matique supprim√©e")
            except:
                pass
        print(f"   ‚úÖ {sessions_nettoyees} sessions probl√©matiques nettoy√©es")
    
    # 4. R√©initialiser configuration MCP si n√©cessaire
    print("\n4. V√©rification configuration MCP...")
    settings_file = Path.home() / ".config/Code/User/settings.json"
    if settings_file.exists():
        try:
            with open(settings_file, 'r') as f:
                settings = json.load(f)
            
            # V√©rifier s'il y a des r√©f√©rences √† localhost:4005
            settings_str = json.dumps(settings)
            if "4005" in settings_str:
                print("   ‚ö†Ô∏è R√©f√©rences au port 4005 d√©tect√©es dans settings.json")
                print("   üí° V√©rification manuelle recommand√©e")
            else:
                print("   ‚úÖ Configuration MCP saine")
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erreur lecture settings: {e}")
    
    # 5. Nettoyer le cache des extensions
    print("\n5. Nettoyage cache extensions...")
    cache_dirs = [
        Path.home() / ".vscode/extensions/ms-python.vscode-pylance*/dist/cache",
        Path.home() / ".config/Code/CachedExtensions",
        Path.home() / ".config/Code/CachedExtensionVSIXs"
    ]
    
    for cache_pattern in cache_dirs:
        for cache_dir in Path("/").glob(str(cache_pattern)):
            if cache_dir.exists() and cache_dir.is_dir():
                try:
                    shutil.rmtree(cache_dir)
                    print(f"   üóëÔ∏è Cache {cache_dir.name} nettoy√©")
                except:
                    pass
    print("   ‚úÖ Cache nettoy√©")
    
    # 6. Instructions finales
    print("\n‚ú® NETTOYAGE TERMIN√â")
    print("=" * 50)
    print("üìã Actions requises:")
    print("   1. Fermer compl√®tement VS Code")
    print("   2. Attendre 10 secondes") 
    print("   3. Relancer VS Code")
    print("   4. Les serveurs MCP devraient red√©marrer proprement")
    
    print(f"\nüîß Si les probl√®mes persistent:")
    print("   ‚Ä¢ D√©sactiver temporairement l'extension Pylance")
    print("   ‚Ä¢ Red√©marrer VS Code")
    print("   ‚Ä¢ R√©activer Pylance")
    print("   ‚Ä¢ V√©rifier que les outils MCP fonctionnent")
    
    return True

def verifier_etat_mcp():
    """V√©rifier l'√©tat des serveurs MCP apr√®s nettoyage"""
    
    print("\nüîç V√âRIFICATION POST-NETTOYAGE")
    print("=" * 30)
    
    # V√©rifier processus
    result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
    mcp_processes = [line for line in result.stdout.split('\n') 
                     if any(term in line.lower() for term in ['mcp', 'pylance']) 
                     and 'grep' not in line]
    
    if mcp_processes:
        print("‚ö†Ô∏è Processus MCP encore actifs:")
        for proc in mcp_processes[:3]:  # Max 3
            print(f"   ‚Ä¢ {proc}")
        print("   üí° Red√©marrage VS Code n√©cessaire")
    else:
        print("‚úÖ Aucun processus MCP bloqu√©")
    
    # V√©rifier ports
    try:
        result = subprocess.run(['ss', '-tlnp'], capture_output=True, text=True)
        if ':4005' in result.stdout:
            print("‚ö†Ô∏è Port 4005 encore utilis√©")
        else:
            print("‚úÖ Port 4005 lib√©r√©")
    except:
        pass
    
    print(f"\nüí≠ Tests recommand√©s dans VS Code:")
    print("   ‚Ä¢ Ouvrir un fichier .py")
    print("   ‚Ä¢ V√©rifier l'autocompl√©tion Pylance")
    print("   ‚Ä¢ Tester les outils MCP dans le chat")

def main():
    """Nettoyage principal"""
    try:
        nettoyer_serveurs_mcp()
        verifier_etat_mcp()
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage: {e}")
        return False

if __name__ == "__main__":
    if main():
        print("\nüéâ Nettoyage MCP termin√© avec succ√®s!")
    else:
        print("\n‚ùå Erreurs d√©tect√©es lors du nettoyage")