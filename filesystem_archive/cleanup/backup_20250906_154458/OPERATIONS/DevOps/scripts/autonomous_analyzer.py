#!/usr/bin/env python3
"""
Script d'orchestration pour l'analyse autonome
Combine l'analyse des pr√©f√©rences et la collecte d'√©chantillons
pour fournir des recommandations d'am√©lioration du projet
"""

import json
import sys
from pathlib import Path
from typing import Dict, List, Any
from dataclasses import dataclass
from datetime import datetime

# Importer les modules d'analyse
sys.path.append(str(Path(__file__).parent))
from analyze_preferences import PreferencesAnalyzer
from collect_samples import SampleCollector

@dataclass
class ProjectRecommendation:
    """Recommandation pour am√©liorer le projet"""
    category: str
    priority: str  # 'high', 'medium', 'low'
    title: str
    description: str
    rationale: str
    implementation_steps: List[str]
    estimated_effort: str
    sample_files: List[str]

class AutonomousAnalyzer:
    def __init__(self):
        self.preferences_analyzer = PreferencesAnalyzer()
        self.sample_collector = SampleCollector()
        self.recommendations = []
        
    def run_full_analysis(self):
        """Lance une analyse compl√®te et g√©n√®re des recommandations"""
        print("üöÄ D√©marrage de l'analyse autonome...")
        
        # √âtape 1: Analyser les pr√©f√©rences
        print("\nüìä Analyse des pr√©f√©rences de d√©veloppement...")
        self.preferences_analyzer.analyze_markdown_files()
        self.preferences_analyzer.analyze_config_files()
        self.preferences_analyzer.compute_global_patterns()
        preferences_report = self.preferences_analyzer.generate_report()
        
        # √âtape 2: Collecter les √©chantillons
        print("\nüìÅ Collecte des √©chantillons de fichiers...")
        if self.sample_collector.pensine_path.exists():
            self.sample_collector.collect_samples()
        samples_report = self.sample_collector.generate_report()
        
        # √âtape 3: G√©n√©rer des recommandations
        print("\nüß† G√©n√©ration des recommandations...")
        self._generate_recommendations(preferences_report, samples_report)
        
        # √âtape 4: G√©n√©rer le rapport final
        print("\nüìã G√©n√©ration du rapport final...")
        final_report = self._generate_final_report(preferences_report, samples_report)
        
        return final_report
    
    def _generate_recommendations(self, preferences: Dict, samples: Dict):
        """G√©n√®re des recommandations bas√©es sur l'analyse"""
        
        # Recommandations bas√©es sur les pr√©f√©rences
        self._analyze_architecture_patterns(preferences)
        self._analyze_language_usage(preferences)
        self._analyze_testing_gaps(preferences)
        
        # Recommandations bas√©es sur les √©chantillons
        self._analyze_sample_diversity(samples)
        self._analyze_file_types_coverage(samples)
        self._analyze_test_scenarios(samples)
        
        # Recommandations pour PaniniFS sp√©cifiquement
        self._generate_panini_fs_recommendations(preferences, samples)
    
    def _analyze_architecture_patterns(self, preferences: Dict):
        """Analyse les patterns d'architecture utilis√©s"""
        patterns = preferences.get('global_patterns', {}).get('architecture_patterns', {})
        
        if 'async' in patterns and patterns['async'] > 1:
            self.recommendations.append(ProjectRecommendation(
                category='architecture',
                priority='medium',
                title='Optimisation des patterns asynchrones',
                description='Vous utilisez fr√©quemment des patterns asynchrones. PaniniFS pourrait b√©n√©ficier d\'optimisations sp√©cifiques.',
                rationale='D√©tection de l\'utilisation r√©currente de Tokio et patterns async/await dans vos projets',
                implementation_steps=[
                    'Audit des performances des op√©rations async actuelles',
                    'Impl√©mentation de pools de connexions pour les op√©rations I/O',
                    'Optimisation des verrous (Mutex) pour r√©duire la contention',
                    'Tests de charge avec diff√©rents patterns de concurrence'
                ],
                estimated_effort='1-2 semaines',
                sample_files=[]
            ))
        
        if 'microservices' in patterns:
            self.recommendations.append(ProjectRecommendation(
                category='architecture',
                priority='low',
                title='Architecture microservices pour PaniniFS',
                description='Consid√©rer une architecture modulaire pour PaniniFS bas√©e sur vos pr√©f√©rences microservices',
                rationale='Votre exp√©rience avec les microservices pourrait √™tre appliqu√©e √† PaniniFS',
                implementation_steps=[
                    'Identifier les modules ind√©pendants dans PaniniFS',
                    'D√©finir les interfaces entre modules',
                    'Impl√©menter une communication inter-modules',
                    'Tests d\'int√©gration modulaire'
                ],
                estimated_effort='3-4 semaines',
                sample_files=[]
            ))
    
    def _analyze_language_usage(self, preferences: Dict):
        """Analyse l'utilisation des langages"""
        languages = preferences.get('global_patterns', {}).get('languages', {})
        
        if 'rust' in languages and languages['rust'] > 2:
            self.recommendations.append(ProjectRecommendation(
                category='language',
                priority='high',
                title='Optimisations Rust avanc√©es',
                description='Exploiter davantage les fonctionnalit√©s avanc√©es de Rust pour PaniniFS',
                rationale='Votre expertise en Rust peut √™tre mieux exploit√©e',
                implementation_steps=[
                    'Audit du code pour identifier les allocations inutiles',
                    'Utilisation de `Cow` pour r√©duire les clones',
                    'Impl√©mentation de traits personnalis√©s pour les op√©rations communes',
                    'Optimisation des structures de donn√©es avec `Box`, `Rc`, `Arc`'
                ],
                estimated_effort='2-3 semaines',
                sample_files=[]
            ))
        
        if 'python' in languages:
            self.recommendations.append(ProjectRecommendation(
                category='tooling',
                priority='medium',
                title='Outils Python pour PaniniFS',
                description='D√©velopper des outils Python pour faciliter l\'utilisation de PaniniFS',
                rationale='Votre exp√©rience Python peut cr√©er des outils compl√©mentaires',
                implementation_steps=[
                    'Cr√©er un client Python pour PaniniFS',
                    'D√©velopper des scripts d\'analyse et de migration',
                    'Impl√©menter des tests d\'int√©gration en Python',
                    'Cr√©er des outils de visualisation des donn√©es'
                ],
                estimated_effort='1-2 semaines',
                sample_files=[]
            ))
    
    def _analyze_testing_gaps(self, preferences: Dict):
        """Identifie les lacunes dans les tests"""
        self.recommendations.append(ProjectRecommendation(
            category='testing',
            priority='high',
            title='Strat√©gie de tests compl√®te',
            description='D√©velopper une strat√©gie de tests robuste pour PaniniFS',
            rationale='Tests critiques pour un syst√®me de fichiers',
            implementation_steps=[
                'Tests unitaires pour tous les modules core',
                'Tests d\'int√©gration pour les op√©rations FUSE',
                'Tests de performance et de charge',
                'Tests de r√©cup√©ration apr√®s panne',
                'Tests de compatibilit√© multi-plateforme'
            ],
            estimated_effort='3-4 semaines',
            sample_files=[]
        ))
    
    def _analyze_sample_diversity(self, samples: Dict):
        """Analyse la diversit√© des √©chantillons"""
        file_types = samples.get('statistics', {}).get('file_types', {})
        
        if len(file_types) > 10:
            self.recommendations.append(ProjectRecommendation(
                category='testing',
                priority='medium',
                title='Tests avec diversit√© de fichiers',
                description='Exploiter la diversit√© des types de fichiers pour des tests r√©alistes',
                rationale=f'D√©tection de {len(file_types)} types de fichiers diff√©rents',
                implementation_steps=[
                    'Cr√©er des tests avec chaque type de fichier majeur',
                    'Tester les performances selon les types de fichiers',
                    'Valider la pr√©servation des m√©tadonn√©es',
                    'Tests de recherche s√©mantique sur diff√©rents formats'
                ],
                estimated_effort='1-2 semaines',
                sample_files=list(file_types.keys())[:10]
            ))
    
    def _analyze_file_types_coverage(self, samples: Dict):
        """Analyse la couverture des types de fichiers"""
        scenarios = samples.get('test_scenarios', [])
        
        if scenarios:
            self.recommendations.append(ProjectRecommendation(
                category='testing',
                priority='medium',
                title='Sc√©narios de test automatis√©s',
                description='Impl√©menter des tests automatis√©s bas√©s sur les sc√©narios identifi√©s',
                rationale=f'G√©n√©ration de {len(scenarios)} sc√©narios de test potentiels',
                implementation_steps=[
                    'Automatiser les sc√©narios de test g√©n√©r√©s',
                    'Cr√©er des benchmarks par type de fichier',
                    'Impl√©menter des tests de r√©gression',
                    'Valider les op√©rations sur diff√©rentes tailles de fichiers'
                ],
                estimated_effort='2-3 semaines',
                sample_files=[]
            ))
    
    def _analyze_test_scenarios(self, samples: Dict):
        """Analyse les sc√©narios de test possibles"""
        recommendations = samples.get('recommended_test_files', {})
        
        if recommendations.get('code_files_only'):
            self.recommendations.append(ProjectRecommendation(
                category='feature',
                priority='medium',
                title='Indexation intelligente du code source',
                description='Impl√©menter une indexation sp√©cialis√©e pour les fichiers de code',
                rationale='Nombreux fichiers de code source disponibles pour les tests',
                implementation_steps=[
                    'Parser les fichiers de code pour extraire les symboles',
                    'Cr√©er un index des fonctions, classes, et variables',
                    'Impl√©menter la recherche par signature de fonction',
                    'Ajouter la navigation dans le code (go-to-definition)'
                ],
                estimated_effort='4-5 semaines',
                sample_files=recommendations['code_files_only'][:5]
            ))
    
    def _generate_panini_fs_recommendations(self, preferences: Dict, samples: Dict):
        """G√©n√®re des recommandations sp√©cifiques √† PaniniFS"""
        
        # Recommandation bas√©e sur l'√©tat actuel du projet
        self.recommendations.append(ProjectRecommendation(
            category='priority',
            priority='high',
            title='Finalisation du syst√®me de stockage',
            description='Compl√©ter l\'impl√©mentation du syst√®me de stockage avec Sled',
            rationale='Base n√©cessaire pour toutes les autres fonctionnalit√©s',
            implementation_steps=[
                'Finaliser les tests unitaires pour GitStorage',
                'Impl√©menter les op√©rations de recherche manquantes',
                'Ajouter la gestion des transactions',
                'Optimiser les performances des op√©rations batch',
                'Documenter l\'API de stockage'
            ],
            estimated_effort='2-3 semaines',
            sample_files=[]
        ))
        
        self.recommendations.append(ProjectRecommendation(
            category='feature',
            priority='high',
            title='Interface FUSE fonctionnelle',
            description='Impl√©menter une interface FUSE basique mais fonctionnelle',
            rationale='Objectif principal du projet PaniniFS',
            implementation_steps=[
                'Impl√©menter les op√©rations FUSE de base (read, write, list)',
                'Ajouter la gestion des m√©tadonn√©es √©tendues',
                'Impl√©menter la recherche s√©mantique via des r√©pertoires virtuels',
                'Tests avec diff√©rents types de fichiers',
                'Optimisation des performances I/O'
            ],
            estimated_effort='4-6 semaines',
            sample_files=[]
        ))
        
        self.recommendations.append(ProjectRecommendation(
            category='architecture',
            priority='medium',
            title='Architecture modulaire extensible',
            description='Refactorer l\'architecture pour faciliter l\'ajout de nouvelles fonctionnalit√©s',
            rationale='Faciliter l\'√©volution future du projet',
            implementation_steps=[
                'D√©finir des traits pour les modules extensibles',
                'Impl√©menter un syst√®me de plugins',
                'S√©parer les couches (storage, semantic, vfs)',
                'Cr√©er des interfaces standardis√©es',
                'Documentation de l\'architecture'
            ],
            estimated_effort='3-4 semaines',
            sample_files=[]
        ))
    
    def _generate_final_report(self, preferences: Dict, samples: Dict) -> Dict[str, Any]:
        """G√©n√®re le rapport final avec toutes les analyses et recommandations"""
        
        # Trier les recommandations par priorit√©
        priority_order = {'high': 0, 'medium': 1, 'low': 2}
        sorted_recommendations = sorted(
            self.recommendations, 
            key=lambda x: (priority_order.get(x.priority, 3), x.category)
        )
        
        report = {
            'analysis_metadata': {
                'timestamp': datetime.now().isoformat(),
                'analyzer_version': '1.0.0',
                'preferences_projects_analyzed': len(preferences.get('projects', {})),
                'sample_files_analyzed': len(samples.get('samples', [])),
            },
            'executive_summary': {
                'total_recommendations': len(self.recommendations),
                'high_priority_count': len([r for r in self.recommendations if r.priority == 'high']),
                'medium_priority_count': len([r for r in self.recommendations if r.priority == 'medium']),
                'low_priority_count': len([r for r in self.recommendations if r.priority == 'low']),
                'estimated_total_effort': self._calculate_total_effort(),
                'key_insights': self._generate_key_insights(preferences, samples)
            },
            'preferences_analysis': preferences,
            'samples_analysis': samples,
            'recommendations': [
                {
                    'category': rec.category,
                    'priority': rec.priority,
                    'title': rec.title,
                    'description': rec.description,
                    'rationale': rec.rationale,
                    'implementation_steps': rec.implementation_steps,
                    'estimated_effort': rec.estimated_effort,
                    'sample_files': rec.sample_files
                }
                for rec in sorted_recommendations
            ],
            'next_actions': self._generate_next_actions(),
            'risk_assessment': self._generate_risk_assessment()
        }
        
        return report
    
    def _calculate_total_effort(self) -> str:
        """Calcule l'effort total estim√©"""
        # Simplifi√© - pourrait √™tre plus sophistiqu√©
        high_count = len([r for r in self.recommendations if r.priority == 'high'])
        medium_count = len([r for r in self.recommendations if r.priority == 'medium'])
        low_count = len([r for r in self.recommendations if r.priority == 'low'])
        
        total_weeks = high_count * 3 + medium_count * 2 + low_count * 1
        return f"{total_weeks}-{total_weeks + 5} semaines"
    
    def _generate_key_insights(self, preferences: Dict, samples: Dict) -> List[str]:
        """G√©n√®re les insights cl√©s de l'analyse"""
        insights = []
        
        # Insights sur les pr√©f√©rences
        summary = preferences.get('summary', {})
        if summary.get('most_used_language'):
            insights.append(f"Expertise principale d√©tect√©e: {summary['most_used_language']}")
        
        if summary.get('preferred_architecture'):
            insights.append(f"Pattern d'architecture pr√©f√©r√©: {summary['preferred_architecture']}")
        
        # Insights sur les √©chantillons
        stats = samples.get('statistics', {})
        if stats.get('file_types'):
            insights.append(f"Diversit√© des types de fichiers: {len(stats['file_types'])} types d√©tect√©s")
        
        # Insights sp√©cifiques √† PaniniFS
        insights.append("PaniniFS est en phase de d√©veloppement initial avec un potentiel important")
        insights.append("L'architecture modulaire facilitera l'ajout de fonctionnalit√©s avanc√©es")
        
        return insights
    
    def _generate_next_actions(self) -> List[str]:
        """G√©n√®re les prochaines actions recommand√©es"""
        high_priority = [r for r in self.recommendations if r.priority == 'high']
        
        actions = []
        if high_priority:
            actions.append(f"Prioriser: {high_priority[0].title}")
            actions.append("Mettre en place des tests automatis√©s complets")
            actions.append("Finaliser l'impl√©mentation du stockage Sled")
            actions.append("Commencer le d√©veloppement de l'interface FUSE")
        
        actions.append("Planifier les it√©rations de d√©veloppement par priorit√©")
        actions.append("Documenter l'architecture actuelle")
        
        return actions
    
    def _generate_risk_assessment(self) -> Dict[str, Any]:
        """G√©n√®re une √©valuation des risques"""
        return {
            'technical_risks': [
                "Complexit√© de l'interface FUSE peut ralentir le d√©veloppement",
                "Performance des op√©rations s√©mantiques sur de gros volumes",
                "Compatibilit√© multi-plateforme non encore valid√©e"
            ],
            'project_risks': [
                "Scope du projet potentiellement trop ambitieux",
                "Manque de tests d'int√©gration complets",
                "Documentation utilisateur insuffisante"
            ],
            'mitigation_strategies': [
                "D√©veloppement incr√©mental avec tests √† chaque √©tape",
                "Benchmarks r√©guliers pour valider les performances",
                "Tests sur diff√©rents syst√®mes d'exploitation",
                "Cr√©ation d'exemples d'utilisation concrets"
            ]
        }
    
    def save_report(self, output_file: str = "autonomous_analysis_report.json"):
        """Sauvegarde le rapport final"""
        report = self._generate_final_report({}, {})
        
        scripts_dir = Path("/home/stephane/GitHub/PaniniFS-1/scripts/scripts")
        scripts_dir.mkdir(exist_ok=True)
        output_path = scripts_dir / output_file
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"Rapport d'analyse autonome sauvegard√© dans {output_path}")
        return output_path

def main():
    """Fonction principale"""
    analyzer = AutonomousAnalyzer()
    
    print("ü§ñ ANALYSE AUTONOME PANINI-FS")
    print("=" * 50)
    
    try:
        # Lancer l'analyse compl√®te
        final_report = analyzer.run_full_analysis()
        
        # Sauvegarder le rapport
        report_path = analyzer.save_report()
        
        # Afficher le r√©sum√© ex√©cutif
        summary = final_report.get('executive_summary', {})
        print(f"\nüìà R√âSUM√â EX√âCUTIF")
        print(f"Recommandations g√©n√©r√©es: {summary.get('total_recommendations', 0)}")
        print(f"Priorit√© haute: {summary.get('high_priority_count', 0)}")
        print(f"Priorit√© moyenne: {summary.get('medium_priority_count', 0)}")
        print(f"Effort total estim√©: {summary.get('estimated_total_effort', 'Non calcul√©')}")
        
        print(f"\nüéØ INSIGHTS CL√âS:")
        for insight in summary.get('key_insights', [])[:3]:
            print(f"  ‚Ä¢ {insight}")
        
        print(f"\n‚ö° PROCHAINES ACTIONS:")
        for action in summary.get('next_actions', [])[:3]:
            print(f"  ‚Ä¢ {action}")
        
        print(f"\nüìä Rapport d√©taill√©: {report_path}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
