#!/bin/bash

# üå•Ô∏è PaniniFS Cloud Autonomous Launcher
# Lance l'√©cosyst√®me cloud autonome complet

set -e

echo "üå•Ô∏è PANINI-FS CLOUD AUTONOMOUS ECOSYSTEM"
echo "======================================="
echo "üéØ 100% Cloud, 0% D√©pendance Totoro"
echo ""

# Variables de configuration
GITHUB_USER="stephanedenis"
GITHUB_TOKEN="${GITHUB_TOKEN:-}"
COLAB_NOTEBOOK_URL="https://colab.research.google.com/github/stephanedenis/PaniniFS/blob/master/Copilotage/colab_notebooks/semantic_processing_accelerated.ipynb"

# Fonctions utilitaires
show_progress() {
    echo "üîÑ $1..."
}

show_success() {
    echo "‚úÖ $1"
}

show_error() {
    echo "‚ùå $1"
}

# √âtape 1: V√©rification pr√©requis
show_progress "V√©rification configuration"

if [ -z "$GITHUB_TOKEN" ]; then
    echo "‚ö†Ô∏è Variable GITHUB_TOKEN non d√©finie"
    echo "üí° Utilisez: export GITHUB_TOKEN=<VOTRE_TOKEN_PAT>"
    echo "üîó Ou lancez sans token pour repos publics uniquement"
fi

# √âtape 2: Setup repos si n√©cessaire
show_progress "V√©rification √©cosyst√®me repos"

setup_repos_if_needed() {
    local repos=("PaniniFS-Public" "PaniniFS-Academic" "PaniniFS-OpenSource")
    local missing_repos=0
    
    for repo in "${repos[@]}"; do
        if ! curl -s "https://api.github.com/repos/$GITHUB_USER/$repo" | grep -q '"name"'; then
            ((missing_repos++))
        fi
    done
    
    if [ $missing_repos -gt 0 ]; then
        echo "üì¶ $missing_repos repos manquants dans l'√©cosyst√®me"
        echo "üöÄ Lancement setup automatique..."
        
        if [ -f "Copilotage/scripts/setup_cloud_autonomous.sh" ]; then
            chmod +x Copilotage/scripts/setup_cloud_autonomous.sh
            ./Copilotage/scripts/setup_cloud_autonomous.sh
        else
            show_error "Script setup non trouv√©"
            exit 1
        fi
    else
        show_success "√âcosyst√®me repos complet"
    fi
}

setup_repos_if_needed

# √âtape 3: Push notebook mis √† jour
show_progress "Mise √† jour notebook Colab"

git add Copilotage/colab_notebooks/semantic_processing_accelerated.ipynb 2>/dev/null || true
git add Copilotage/cloud_autonomous_architecture.md 2>/dev/null || true
git add Copilotage/scripts/setup_cloud_autonomous.sh 2>/dev/null || true

if git diff --staged --quiet; then
    show_success "Notebook d√©j√† √† jour"
else
    git commit -m "üå•Ô∏è Update autonomous cloud ecosystem

- GitHub repos direct access without Totoro dependencies
- Hierarchical data architecture: Public < Communities < Personal  
- 100% cloud autonomous processing
- Real ecosystem data processing
- Version-based model evolution
- Complete independence from local resources

Ready for fully autonomous cloud operation!"

    git push origin master
    show_success "Notebook mis √† jour sur GitHub"
fi

# √âtape 4: Test acc√®s repos √©cosyst√®me
show_progress "Test acc√®s repos √©cosyst√®me"

test_repo_access() {
    local test_repos=("PaniniFS" "PaniniFS-Public")
    local accessible=0
    
    for repo in "${test_repos[@]}"; do
        if curl -s --max-time 10 "https://api.github.com/repos/$GITHUB_USER/$repo" | grep -q '"name"'; then
            echo "   ‚úÖ $repo accessible"
            ((accessible++))
        else
            echo "   ‚ö†Ô∏è $repo non accessible"
        fi
    done
    
    if [ $accessible -gt 0 ]; then
        show_success "Acc√®s repos valid√© ($accessible/$(${#test_repos[@]}))"
        return 0
    else
        show_error "Aucun repo accessible"
        return 1
    fi
}

if test_repo_access; then
    echo "üåç Repos de l'√©cosyst√®me accessibles"
else
    echo "‚ö†Ô∏è Probl√®me d'acc√®s aux repos, mais continuons..."
fi

# √âtape 5: Pr√©paration launch Colab
show_progress "Pr√©paration lancement Colab"

# Cr√©er script de lancement direct
cat > launch_colab_autonomous.sh << EOF
#!/bin/bash

echo "üöÄ LANCEMENT COLAB AUTONOMOUS"
echo "============================"

COLAB_URL="$COLAB_NOTEBOOK_URL"

echo "üìì Notebook: semantic_processing_accelerated.ipynb"
echo "üå•Ô∏è Mode: 100% Cloud Autonomous" 
echo "üìä Donn√©es: √âcosyst√®me GitHub hi√©rarchique"
echo ""

echo "üîó URL Colab:"
echo "\$COLAB_URL"
echo ""

# Copier dans presse-papier si possible
echo "\$COLAB_URL" | xclip -selection clipboard 2>/dev/null || echo "(xclip non disponible)"

# Ouvrir navigateur si possible
if command -v xdg-open &> /dev/null; then
    echo "üåê Ouverture navigateur..."
    xdg-open "\$COLAB_URL" &
elif command -v firefox &> /dev/null; then
    echo "ü¶ä Ouverture Firefox..."
    firefox "\$COLAB_URL" &
else
    echo "üí° Copiez l'URL ci-dessus dans votre navigateur"
fi

echo ""
echo "üìã INSTRUCTIONS COLAB:"
echo "1. ‚ö° Activer GPU: Runtime > Change runtime type > GPU"
echo "2. üîÑ Ex√©cuter toutes les cellules"
echo "3. üìä Le notebook va:"
echo "   - Cloner automatiquement l'√©cosyst√®me GitHub"
echo "   - Traiter vos donn√©es hi√©rarchiques"
echo "   - G√©n√©rer analyse s√©mantique compl√®te"
echo "   - T√©l√©charger r√©sultats automatiquement"
echo ""
echo "üéØ Traitement 100% autonome de votre √©cosyst√®me!"
EOF

chmod +x launch_colab_autonomous.sh

# √âtape 6: Monitoring setup
show_progress "Configuration monitoring autonome"

# Cr√©er monitoring basic
cat > monitor_ecosystem.py << 'EOF'
#!/usr/bin/env python3
"""Monitoring simple de l'√©cosyst√®me autonomous"""

import requests
import json
from datetime import datetime

def check_ecosystem_health():
    repos = [
        "stephanedenis/PaniniFS",
        "stephanedenis/PaniniFS-Public"
    ]
    
    print("üå•Ô∏è MONITORING √âCOSYST√àME AUTONOMOUS")
    print("=" * 40)
    
    for repo in repos:
        try:
            url = f"https://api.github.com/repos/{repo}"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ {repo}")
                print(f"   Derni√®re maj: {data.get('updated_at', 'N/A')}")
                print(f"   Taille: {data.get('size', 0)} KB")
            else:
                print(f"‚ö†Ô∏è {repo}: Status {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {repo}: {e}")
    
    print(f"\nüìä Check termin√©: {datetime.now()}")

if __name__ == "__main__":
    check_ecosystem_health()
EOF

chmod +x monitor_ecosystem.py

show_success "Monitoring configur√©"

# √âtape 7: R√©sum√© final et lancement
echo ""
echo "üéâ √âCOSYST√àME CLOUD AUTONOMOUS PR√äT!"
echo "===================================="
echo ""
echo "üåç Architecture d√©ploy√©e:"
echo "   üì¶ Repos hi√©rarchiques: Public < Communaut√©s < Personnel"
echo "   üîÑ Versioning automatique par mod√®le"
echo "   ‚ö° Processing GPU Colab int√©gr√©"
echo "   üìä Monitoring ecosystem continu"
echo ""
echo "üöÄ Lancement imm√©diat:"
echo "   ./launch_colab_autonomous.sh"
echo ""
echo "üìã Fonctionnalit√©s autonomes:"
echo "   ‚úÖ Clonage automatique √©cosyst√®me GitHub"
echo "   ‚úÖ Acc√®s direct Pensine via GitHub"
echo "   ‚úÖ Processing hi√©rarchique des donn√©es"
echo "   ‚úÖ 0% d√©pendance Totoro"
echo "   ‚úÖ 100% cloud gratuit"
echo ""
echo "üîó URL directe Colab:"
echo "$COLAB_NOTEBOOK_URL"
echo ""

# Demander si lancer imm√©diatement
read -p "üöÄ Lancer Colab maintenant? (y/N): " launch_now

if [[ $launch_now =~ ^[Yy]$ ]]; then
    echo "üå•Ô∏è Lancement Colab Autonomous..."
    ./launch_colab_autonomous.sh
else
    echo "üí° Lancez plus tard avec: ./launch_colab_autonomous.sh"
fi

echo ""
echo "üåü √âCOSYST√àME AUTONOME OP√âRATIONNEL!"
echo "üîç Monitoring: ./monitor_ecosystem.py"
echo "üìä 100% Cloud, 0% Totoro, ‚àû% Autonomous!"
