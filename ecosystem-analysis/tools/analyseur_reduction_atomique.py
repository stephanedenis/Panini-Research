#!/usr/bin/env python3
"""
ANALYSEUR IT√âRATIF DE R√âDUCTION ATOMIQUE
========================================

Analyse it√©rative des 654 primitives PanLang pour les d√©composer en atomes,
isotopes et mol√©cules fondamentaux. Commence par les 538 dhƒÅtu Sanskrit
pour identifier les concepts primaires irr√©ductibles.

Objectif: R√©duire 654 primitives ‚Üí ~50 atomes + isotopes + mol√©cules
"""

import sqlite3
import json
import re
from pathlib import Path
from typing import Dict, List, Set, Tuple
from collections import Counter, defaultdict
from dataclasses import dataclass
import time

@dataclass
class AtomePrimitive:
    """Atome fondamental irr√©ductible"""
    symbole: str  # Ex: GAM (mouvement), KRIT (action), VID (savoir)
    sens_primaire: str
    occurrences: int
    exemples_dhatu: List[str]
    isotopes: List[str]  # Variations du m√™me atome
    poids_atomique: float  # Fr√©quence relative

@dataclass 
class MoleculePrimitive:
    """Mol√©cule compos√©e d'atomes"""
    formule: str  # Ex: GAM+KRIT (mouvement+action)
    atomes_constitutifs: List[str]
    sens_moleculaire: str
    exemples_primitives: List[str]
    stabilite: float  # Fr√©quence de cette combinaison

class AnalyseurReductionAtomique:
    """Analyseur pour r√©duction atomique des primitives"""
    
    def __init__(self):
        self.panlang_db = Path("panlang_primitives/panlang_primitives.db")
        self.output_dir = Path("reduction_atomique")
        self.output_dir.mkdir(exist_ok=True)
        
        # Structures atomiques
        self.atomes_candidats: Dict[str, AtomePrimitive] = {}
        self.molecules_candidats: Dict[str, MoleculePrimitive] = {}
        self.primitives_analysees: List[Dict] = []
        
        # Patterns de r√©duction Sanskrit
        self.patterns_dhatu = self._init_patterns_dhatu()
        
        # Base de donn√©es r√©duite
        self.db_reduite = self.output_dir / "primitives_atomiques.db"
        self.init_database_atomique()
    
    def _init_patterns_dhatu(self) -> Dict[str, List[str]]:
        """Patterns pour identifier les racines atomiques Sanskrit"""
        return {
            # ATOMES DE MOUVEMENT
            "mouvement": [
                r'‡§ó‡§Æ‡•ç|‡§ó‡§ö‡•ç‡§õ|‡§Ø‡§æ|‡§á|‡§™‡§§‡•ç',  # aller, venir, voler
                r'‡§∏‡•ç‡§•‡§æ|‡§§‡§ø‡§∑‡•ç‡§†',  # √™tre debout, demeurer
                r'‡§ö‡§≤‡•ç|‡§ö‡§∞‡•ç',  # bouger, marcher
            ],
            
            # ATOMES D'ACTION
            "action": [
                r'‡§ï‡•É|‡§ï‡§∞‡•ç|‡§ï‡§∞‡•ã‡§§‡§ø',  # faire, cr√©er
                r'‡§≠‡•Ç|‡§≠‡§µ‡•ç',  # devenir, √™tre
                r'‡§Ö‡§∏‡•ç|‡§≠‡§µ‡•ç',  # exister
                r'‡§¶‡§æ|‡§¶|‡§¶‡§§‡•ç‡§§',  # donner
            ],
            
            # ATOMES DE CONNAISSANCE
            "connaissance": [
                r'‡§µ‡§ø‡§¶‡•ç|‡§ú‡§æ‡§®‡•ç|‡§ú‡•ç‡§û‡§æ',  # savoir, conna√Ætre
                r'‡§¨‡•Å‡§ß‡•ç|‡§¨‡•ã‡§ß',  # comprendre, √©veiller
                r'‡§Æ‡§®‡•ç|‡§ö‡§ø‡§®‡•ç‡§§‡•ç',  # penser, r√©fl√©chir
                r'‡§™‡§†‡•ç|‡§™‡§æ‡§†',  # lire, r√©citer
            ],
            
            # ATOMES DE PAROLE
            "parole": [
                r'‡§µ‡§¶‡•ç|‡§µ‡§ö‡•ç|‡§â‡§ö‡•ç',  # dire, parler
                r'‡§¨‡•ç‡§∞‡•Ç|‡§¨‡•ç‡§∞‡•Å‡§µ‡•ç',  # dire, proclamer
                r'‡§∂‡•ç‡§∞‡•Å|‡§∂‡•É‡§£‡•Å',  # entendre
                r'‡§ó‡•à|‡§ó‡§æ',  # chanter
            ],
            
            # ATOMES SENSORIELS
            "perception": [
                r'‡§¶‡•É‡§∂‡•ç|‡§™‡§∂‡•ç‡§Ø',  # voir
                r'‡§∂‡•ç‡§∞‡•Å',  # entendre
                r'‡§∏‡•ç‡§™‡•É‡§∂‡•ç|‡§∏‡•ç‡§™‡§∞‡•ç‡§∂',  # toucher
                r'‡§ò‡•ç‡§∞‡§æ|‡§ó‡§Ç‡§ß',  # sentir
                r'‡§∞‡§∏‡•ç|‡§∏‡•ç‡§µ‡§æ‡§¶',  # go√ªter
            ],
            
            # ATOMES TEMPORELS
            "temps": [
                r'‡§ï‡§æ‡§≤|‡§∏‡§Æ‡§Ø',  # temps
                r'‡§™‡•Ç‡§∞‡•ç‡§µ|‡§™‡§∂‡•ç‡§ö‡§æ‡§§‡•ç',  # avant, apr√®s
                r'‡§á‡§¶‡§æ‡§®‡•Ä‡§Æ‡•ç|‡§∏‡§¶‡•ç‡§Ø',  # maintenant, imm√©diatement
            ],
            
            # ATOMES SPATIAUX
            "espace": [
                r'‡§Ø‡§§‡•ç‡§∞|‡§§‡§§‡•ç‡§∞',  # o√π, l√†
                r'‡§â‡§™‡§∞‡§ø|‡§Ö‡§ß‡§É',  # au-dessus, en dessous  
                r'‡§™‡§æ‡§∞‡•ç‡§∂‡•ç‡§µ|‡§Æ‡§ß‡•ç‡§Ø',  # c√¥t√©, milieu
            ]
        }
    
    def init_database_atomique(self):
        """Initialise la base de donn√©es atomique"""
        conn = sqlite3.connect(self.db_reduite)
        cursor = conn.cursor()
        
        # Table des atomes
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS atomes_primitifs (
            id INTEGER PRIMARY KEY,
            symbole TEXT UNIQUE,
            sens_primaire TEXT,
            occurrences INTEGER,
            exemples_dhatu TEXT,  -- JSON
            isotopes TEXT,  -- JSON variations
            poids_atomique REAL,
            date_identification TEXT
        )
        """)
        
        # Table des mol√©cules
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS molecules_primitives (
            id INTEGER PRIMARY KEY,
            formule TEXT,
            atomes_constitutifs TEXT,  -- JSON
            sens_moleculaire TEXT,
            exemples_primitives TEXT,  -- JSON
            stabilite REAL,
            date_formation TEXT
        )
        """)
        
        # Table de r√©duction (mapping primitives ‚Üí atomes/mol√©cules)
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS reduction_mapping (
            id INTEGER PRIMARY KEY,
            primitive_originale TEXT,
            langue_source TEXT,
            decomposition_atomique TEXT,  -- JSON
            type_reduction TEXT,  -- 'atome', 'molecule', 'composite'
            score_reduction REAL,
            date_reduction TEXT
        )
        """)
        
        conn.commit()
        conn.close()
    
    def charger_primitives_sanskrit(self) -> List[Dict]:
        """Charge les primitives Sanskrit pour analyse"""
        print("üïâÔ∏è  CHARGEMENT PRIMITIVES SANSKRIT")
        print("-" * 40)
        
        conn = sqlite3.connect(self.panlang_db)
        cursor = conn.cursor()
        
        cursor.execute("""
        SELECT terme_original, domaine, contexte, certitude_score
        FROM primitives
        WHERE langue_source = 'sa' AND domaine = 'dhatu_racine'
        ORDER BY LENGTH(terme_original)
        """)
        
        primitives = []
        for terme, domaine, contexte, certitude in cursor.fetchall():
            primitives.append({
                "terme": terme,
                "domaine": domaine,
                "contexte": contexte,
                "certitude": certitude
            })
        
        conn.close()
        
        print(f"‚úÖ Charg√©: {len(primitives)} primitives Sanskrit")
        return primitives
    
    def analyser_frequences_morphologiques(self, primitives: List[Dict]) -> Dict[str, int]:
        """Analyse les fr√©quences morphologiques des √©l√©ments"""
        print("üî¨ ANALYSE FR√âQUENCES MORPHOLOGIQUES")
        print("-" * 45)
        
        # Extraction des √©l√©ments morphologiques
        elements = []
        
        for primitive in primitives:
            terme = primitive["terme"]
            
            # Suppression des caract√®res de formatting
            terme_nettoye = re.sub(r'[<>\[\]{}()\'"‡•§,.\-\s]+', '', terme)
            
            if len(terme_nettoye) > 0:
                # Analyse par syllabe/morph√®me
                morphemes = self.extraire_morphemes_sanskrit(terme_nettoye)
                elements.extend(morphemes)
        
        # Comptage fr√©quences
        frequences = Counter(elements)
        
        # Filtrage √©l√©ments significatifs (longueur > 1, fr√©quence > 1)
        frequences_filtrees = {
            elem: freq for elem, freq in frequences.items()
            if len(elem) > 1 and freq > 1
        }
        
        print(f"‚úÖ √âl√©ments morphologiques: {len(frequences_filtrees)}")
        
        # Top 20 plus fr√©quents
        top_elements = sorted(frequences_filtrees.items(), key=lambda x: x[1], reverse=True)[:20]
        print("\nüèÜ TOP 20 √âL√âMENTS FR√âQUENTS:")
        for i, (elem, freq) in enumerate(top_elements, 1):
            print(f"   {i:2d}. {elem} ({freq} occurrences)")
        
        return frequences_filtrees
    
    def extraire_morphemes_sanskrit(self, terme: str) -> List[str]:
        """Extrait les morph√®mes potentiels d'un terme Sanskrit"""
        morphemes = []
        
        # Nettoyage basique
        terme_clean = re.sub(r'[‡•ç]+', '', terme)  # Supprime les halant
        
        # D√©coupage par unit√©s morphologiques potentielles
        if len(terme_clean) >= 2:
            # Morph√®mes de 2-4 caract√®res
            for longueur in [4, 3, 2]:
                for i in range(len(terme_clean) - longueur + 1):
                    morpheme = terme_clean[i:i+longueur]
                    if self.est_morpheme_valide(morpheme):
                        morphemes.append(morpheme)
        
        return morphemes
    
    def est_morpheme_valide(self, morpheme: str) -> bool:
        """V√©rifie si un morph√®me est potentiellement valide"""
        # Crit√®res de base pour un morph√®me Sanskrit valide
        if len(morpheme) < 2:
            return False
        
        # Doit contenir uniquement des caract√®res Devanagari
        if not re.match(r'^[\u0900-\u097F]+$', morpheme):
            return False
        
        # √âviter les morph√®mes trop r√©p√©titifs
        if len(set(morpheme)) == 1:
            return False
            
        return True
    
    def identifier_atomes_candidats(self, frequences: Dict[str, int]) -> Dict[str, AtomePrimitive]:
        """Identifie les atomes candidats √† partir des fr√©quences"""
        print("‚öõÔ∏è  IDENTIFICATION ATOMES CANDIDATS")
        print("-" * 40)
        
        atomes_candidats = {}
        
        # Seuil de fr√©quence pour √™tre consid√©r√© comme atome
        seuil_atomique = max(3, len(frequences) // 50)  # Au moins 3 ou 2% des √©l√©ments
        
        for morpheme, frequence in frequences.items():
            if frequence >= seuil_atomique:
                # Classification s√©mantique approximative
                categorie = self.classifier_morpheme_semantique(morpheme)
                
                atome = AtomePrimitive(
                    symbole=morpheme,
                    sens_primaire=categorie,
                    occurrences=frequence,
                    exemples_dhatu=[],
                    isotopes=[],
                    poids_atomique=frequence / sum(frequences.values())
                )
                
                atomes_candidats[morpheme] = atome
        
        print(f"‚úÖ Atomes candidats identifi√©s: {len(atomes_candidats)}")
        
        # Tri par fr√©quence
        atomes_tries = sorted(atomes_candidats.items(), key=lambda x: x[1].occurrences, reverse=True)
        
        print("\nüèÜ TOP 15 ATOMES CANDIDATS:")
        for i, (symbole, atome) in enumerate(atomes_tries[:15], 1):
            print(f"   {i:2d}. {symbole} ‚Üí {atome.sens_primaire} ({atome.occurrences} occ, poids: {atome.poids_atomique:.3f})")
        
        return atomes_candidats
    
    def classifier_morpheme_semantique(self, morpheme: str) -> str:
        """Classification s√©mantique approximative d'un morph√®me"""
        # Classification basique par patterns
        for categorie, patterns in self.patterns_dhatu.items():
            for pattern in patterns:
                if re.search(pattern, morpheme):
                    return categorie
        
        # Classification par forme
        if re.match(r'.*[‡§Ç‡§Å].*', morpheme):
            return "nasalisation"
        elif re.match(r'.*[‡§æ‡•Ä‡•Ç‡•á‡•à‡•ã‡•å].*', morpheme):
            return "voyelle_longue"
        elif re.match(r'.*[‡•ç].*', morpheme):
            return "consonantique"
        else:
            return "indetermine"
    
    def generer_molecules_primitives(self, atomes: Dict[str, AtomePrimitive], primitives: List[Dict]) -> Dict[str, MoleculePrimitive]:
        """G√©n√®re des mol√©cules √† partir des combinaisons d'atomes"""
        print("üß™ G√âN√âRATION MOL√âCULES PRIMITIVES")
        print("-" * 38)
        
        molecules = {}
        
        # Analyse des combinaisons dans les primitives
        for primitive in primitives:
            terme = primitive["terme"]
            
            # Identification des atomes pr√©sents
            atomes_presents = []
            for symbole_atome in atomes.keys():
                if symbole_atome in terme:
                    atomes_presents.append(symbole_atome)
            
            # Si 2+ atomes ‚Üí mol√©cule candidate
            if len(atomes_presents) >= 2:
                # Tri par poids atomique d√©croissant
                atomes_presents.sort(key=lambda a: atomes[a].poids_atomique, reverse=True)
                
                formule = "+".join(atomes_presents[:3])  # Max 3 atomes par mol√©cule
                
                if formule not in molecules:
                    # Sens mol√©culaire = combinaison des sens atomiques
                    sens_atoms = [atomes[a].sens_primaire for a in atomes_presents[:3]]
                    sens_moleculaire = "_".join(sens_atoms)
                    
                    molecule = MoleculePrimitive(
                        formule=formule,
                        atomes_constitutifs=atomes_presents[:3],
                        sens_moleculaire=sens_moleculaire,
                        exemples_primitives=[terme],
                        stabilite=1.0
                    )
                    molecules[formule] = molecule
                else:
                    molecules[formule].exemples_primitives.append(terme)
                    molecules[formule].stabilite += 1.0
        
        # Calcul stabilit√© relative
        total_molecules = sum(m.stabilite for m in molecules.values())
        for molecule in molecules.values():
            molecule.stabilite = molecule.stabilite / total_molecules if total_molecules > 0 else 0
        
        print(f"‚úÖ Mol√©cules g√©n√©r√©es: {len(molecules)}")
        
        # Top mol√©cules par stabilit√©
        molecules_stables = sorted(molecules.items(), key=lambda x: x[1].stabilite, reverse=True)
        
        print("\nüß¨ TOP 10 MOL√âCULES STABLES:")
        for i, (formule, molecule) in enumerate(molecules_stables[:10], 1):
            print(f"   {i:2d}. {formule} ‚Üí {molecule.sens_moleculaire} (stabilit√©: {molecule.stabilite:.3f})")
        
        return molecules
    
    def sauvegarder_reduction_atomique(self, atomes: Dict[str, AtomePrimitive], molecules: Dict[str, MoleculePrimitive]):
        """Sauvegarde la r√©duction atomique"""
        print("üíæ SAUVEGARDE R√âDUCTION ATOMIQUE")
        print("-" * 35)
        
        conn = sqlite3.connect(self.db_reduite)
        cursor = conn.cursor()
        
        # Sauvegarde atomes
        for symbole, atome in atomes.items():
            cursor.execute("""
            INSERT OR REPLACE INTO atomes_primitifs (
                symbole, sens_primaire, occurrences, exemples_dhatu,
                isotopes, poids_atomique, date_identification
            ) VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                atome.symbole,
                atome.sens_primaire,
                atome.occurrences,
                json.dumps(atome.exemples_dhatu),
                json.dumps(atome.isotopes),
                atome.poids_atomique,
                time.strftime("%Y-%m-%d %H:%M:%S")
            ))
        
        # Sauvegarde mol√©cules
        for formule, molecule in molecules.items():
            cursor.execute("""
            INSERT OR REPLACE INTO molecules_primitives (
                formule, atomes_constitutifs, sens_moleculaire,
                exemples_primitives, stabilite, date_formation
            ) VALUES (?, ?, ?, ?, ?, ?)
            """, (
                molecule.formule,
                json.dumps(molecule.atomes_constitutifs),
                molecule.sens_moleculaire,
                json.dumps(molecule.exemples_primitives),
                molecule.stabilite,
                time.strftime("%Y-%m-%d %H:%M:%S")
            ))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ Sauvegard√©: {len(atomes)} atomes + {len(molecules)} mol√©cules")
    
    def generer_rapport_reduction(self, atomes: Dict[str, AtomePrimitive], molecules: Dict[str, MoleculePrimitive]) -> Dict:
        """G√©n√®re le rapport de r√©duction atomique"""
        
        # Calculs de r√©duction
        nb_primitives_original = 538  # DhƒÅtu Sanskrit
        nb_atomes = len(atomes)
        nb_molecules = len(molecules)
        taux_reduction = round((1 - (nb_atomes + nb_molecules) / nb_primitives_original) * 100, 1)
        
        rapport = {
            "titre": "R√©duction Atomique PanLang - Analyse DhƒÅtu Sanskrit",
            "description": "D√©composition des primitives en atomes et mol√©cules fondamentaux",
            "reduction_stats": {
                "primitives_originales": nb_primitives_original,
                "atomes_identifies": nb_atomes,
                "molecules_generees": nb_molecules,
                "elements_totaux": nb_atomes + nb_molecules,
                "taux_reduction": f"{taux_reduction}%"
            },
            "atomes_principaux": {
                symbole: {
                    "sens": atome.sens_primaire,
                    "occurrences": atome.occurrences,
                    "poids_atomique": round(atome.poids_atomique, 4)
                }
                for symbole, atome in sorted(atomes.items(), key=lambda x: x[1].poids_atomique, reverse=True)[:10]
            },
            "molecules_stables": {
                formule: {
                    "sens": molecule.sens_moleculaire,
                    "atomes": molecule.atomes_constitutifs,
                    "stabilite": round(molecule.stabilite, 4)
                }
                for formule, molecule in sorted(molecules.items(), key=lambda x: x[1].stabilite, reverse=True)[:10]
            },
            "capacites_reconstruction": {
                "decomposition_atomique": True,
                "recombinaison_moleculaire": True,
                "reduction_semantique": True,
                "base_etymologique_sanskrit": True
            },
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "base_donnees": str(self.db_reduite)
        }
        
        # Sauvegarde rapport
        with open(self.output_dir / "rapport_reduction_atomique.json", "w", encoding="utf-8") as f:
            json.dump(rapport, f, indent=2, ensure_ascii=False)
        
        return rapport

def main():
    """Analyse it√©rative de r√©duction atomique"""
    print("‚öõÔ∏è  ANALYSEUR IT√âRATIF DE R√âDUCTION ATOMIQUE")
    print("=" * 55)
    print("Objectif: R√©duire 654 primitives ‚Üí atomes + mol√©cules")
    print("Focus: 538 dhƒÅtu Sanskrit pour base √©tymologique")
    print()
    
    analyseur = AnalyseurReductionAtomique()
    
    # 1. Chargement primitives Sanskrit
    primitives_sanskrit = analyseur.charger_primitives_sanskrit()
    
    if not primitives_sanskrit:
        print("‚ùå Impossible de continuer sans primitives Sanskrit")
        return
    
    # 2. Analyse fr√©quences morphologiques
    frequences = analyseur.analyser_frequences_morphologiques(primitives_sanskrit)
    
    # 3. Identification atomes candidats
    atomes = analyseur.identifier_atomes_candidats(frequences)
    
    # 4. G√©n√©ration mol√©cules
    molecules = analyseur.generer_molecules_primitives(atomes, primitives_sanskrit)
    
    # 5. Sauvegarde
    analyseur.sauvegarder_reduction_atomique(atomes, molecules)
    
    # 6. Rapport final
    rapport = analyseur.generer_rapport_reduction(atomes, molecules)
    
    print("\nüìä RAPPORT R√âDUCTION ATOMIQUE")
    print("=" * 35)
    print(f"‚öõÔ∏è  Primitives originales: {rapport['reduction_stats']['primitives_originales']}")
    print(f"üî¨ Atomes identifi√©s: {rapport['reduction_stats']['atomes_identifies']}")
    print(f"üß™ Mol√©cules g√©n√©r√©es: {rapport['reduction_stats']['molecules_generees']}")
    print(f"üìà Taux de r√©duction: {rapport['reduction_stats']['taux_reduction']}")
    print()
    
    print("üèÜ TOP 5 ATOMES PRIMAIRES:")
    for i, (symbole, info) in enumerate(list(rapport["atomes_principaux"].items())[:5], 1):
        print(f"   {i}. {symbole} ‚Üí {info['sens']} (poids: {info['poids_atomique']})")
    
    print("\nüß¨ TOP 5 MOL√âCULES STABLES:")
    for i, (formule, info) in enumerate(list(rapport["molecules_stables"].items())[:5], 1):
        print(f"   {i}. {formule} ‚Üí {info['sens']} (stabilit√©: {info['stabilite']})")
    
    print(f"\nüíæ Base atomique: {rapport['base_donnees']}")
    print(f"üìÑ Rapport complet: {analyseur.output_dir}/rapport_reduction_atomique.json")
    
    print("\nüéØ R√âDUCTION ATOMIQUE R√âUSSIE!")
    print("   ‚Üí Base √©tymologique Sanskrit d√©compos√©e")
    print("   ‚Üí Atomes primitifs identifi√©s")
    print("   ‚Üí Mol√©cules stables g√©n√©r√©es")
    print("   ‚Üí R√©duction significative de complexit√©")
    print("   ‚Üí Fondation solide pour PanLang √©rudite")

if __name__ == "__main__":
    main()